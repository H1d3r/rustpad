on:
  # Allows running manually from Actions tab
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

name: Rust CI

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features
          name: Clippy Output

  release:
    name: Release ${{ matrix.target }}
    needs: [check, fmt, clippy]
    env:
      PROJECT_NAME_UNDERSCORE: rustpad
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          - name: x64-linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            extension:
            upx_args: --best --lzma
          - name: x64-windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: .exe
            upx_args: -9
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Release Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: 'Compress Binary'
        uses: svenstaro/upx-action@v2
        with:
          files: target/${{ matrix.target }}/release/${{ env.PROJECT_NAME_UNDERSCORE }}${{ matrix.extension }}
          args: ${{ matrix.upx_args }}
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME_UNDERSCORE }}
          path: target/${{ matrix.target }}/release/${{ env.PROJECT_NAME_UNDERSCORE }}${{ matrix.extension }}
